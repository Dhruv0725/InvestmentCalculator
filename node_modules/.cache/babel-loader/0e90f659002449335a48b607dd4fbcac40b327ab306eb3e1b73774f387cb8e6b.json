{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\fourth_mid\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport InputForm from \"./components/InputForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [invstData, setInvstData] = useState(null);\n  const calculateHandler = userInput => {\n    setInvstData(userInput);\n  };\n  const yearlyData = [];\n  let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput[\"expected-return\"] / 100;\n  const duration = +userInput[\"duration\"];\n  let invested = currentSavings;\n  console.log(currentSavings, yearlyContribution, expectedReturn, duration);\n  let totalInterest = 0;\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    totalInterest += yearlyInterest;\n    invested += yearlyContribution;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      savingsEndOfYear: currentSavings,\n      yearlyInterest: yearlyInterest,\n      totalInterest: totalInterest,\n      invested: invested\n    });\n    console.log(yearlyData);\n    yearlyData = [];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {\n      results: invstData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eSSzS+82vTu2XT0mZAliAwsmF/Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["InputForm","ResultTable","useState","Header","jsxDEV","_jsxDEV","App","_s","invstData","setInvstData","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","invested","console","log","totalInterest","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","results","_c","$RefreshReg$"],"sources":["E:/React/fourth_mid/src/App.js"],"sourcesContent":["import InputForm from \"./components/InputForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { useState } from \"react\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  const [invstData, setInvstData] = useState(null);\n\n  const calculateHandler = (userInput) => {\n    setInvstData(userInput);\n  };\n\n  const yearlyData = [];\n\n  let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput[\"expected-return\"] / 100;\n  const duration = +userInput[\"duration\"];\n  let invested = currentSavings;\n  console.log(currentSavings, yearlyContribution, expectedReturn, duration);\n  let totalInterest = 0;\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    totalInterest += yearlyInterest;\n    invested += yearlyContribution;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      savingsEndOfYear: currentSavings,\n      yearlyInterest: yearlyInterest,\n      totalInterest: totalInterest,\n      invested: invested,\n    });\n\n    console.log(yearlyData);\n    yearlyData = [];\n  }\n\n  return (\n    <div>\n      <Header />\n      <InputForm onSubmit={calculateHandler}></InputForm>\n\n      <ResultTable results={invstData}></ResultTable>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMQ,gBAAgB,GAAIC,SAAS,IAAK;IACtCF,YAAY,CAACE,SAAS,CAAC;EACzB,CAAC;EAED,MAAMC,UAAU,GAAG,EAAE;EAErB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;EACvC,IAAIM,QAAQ,GAAGJ,cAAc;EAC7BK,OAAO,CAACC,GAAG,CAACN,cAAc,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,QAAQ,CAAC;EACzE,IAAII,aAAa,GAAG,CAAC;EACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,EAAEK,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGT,cAAc,GAAGE,cAAc;IACtDK,aAAa,IAAIE,cAAc;IAC/BL,QAAQ,IAAIH,kBAAkB;IAC9BD,cAAc,IAAIS,cAAc,GAAGR,kBAAkB;IACrDF,UAAU,CAACW,IAAI,CAAC;MACd;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXI,gBAAgB,EAAEZ,cAAc;MAChCS,cAAc,EAAEA,cAAc;MAC9BF,aAAa,EAAEA,aAAa;MAC5BH,QAAQ,EAAEA;IACZ,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;IACvBA,UAAU,GAAG,EAAE;EACjB;EAEA,oBACEP,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACF,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACL,SAAS;MAAC+B,QAAQ,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEnDzB,OAAA,CAACJ,WAAW;MAAC+B,OAAO,EAAExB;IAAU;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;AAACvB,EAAA,CA1CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}